// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectAlta.Context;

#nullable disable

namespace ProjectAlta.Migrations
{
    [DbContext(typeof(AddContext))]
    partial class AddContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjectAlta.Entity.Account", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Barcode", b =>
                {
                    b.Property<int>("BarcodeID")
                        .HasColumnType("int");

                    b.Property<int?>("CharsetBarcodeID")
                        .HasColumnType("int");

                    b.Property<string>("CharsetBarcodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CodeDetailID")
                        .HasColumnType("int");

                    b.Property<int?>("CodeLeght")
                        .HasColumnType("int");

                    b.Property<int?>("CountCode")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TypeBarcodeID")
                        .HasColumnType("int");

                    b.Property<string>("TypeBarcodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BarcodeID");

                    b.HasIndex("CharsetBarcodeID");

                    b.HasIndex("CodeDetailID");

                    b.HasIndex("TypeBarcodeID");

                    b.ToTable("Barcode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.BarcodesUsageHistory", b =>
                {
                    b.Property<int>("BarcodesUsageHistoryID")
                        .HasColumnType("int");

                    b.Property<int?>("BarcodeID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Scaned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScannedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SpinDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("UsedForSpin")
                        .HasColumnType("bit");

                    b.HasKey("BarcodesUsageHistoryID");

                    b.HasIndex("BarcodeID");

                    b.HasIndex("CustomerID");

                    b.ToTable("BarcodesUsageHistory");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CharsetBarcode", b =>
                {
                    b.Property<int>("CharsetBarcodeID")
                        .HasColumnType("int");

                    b.Property<string>("CharsetBarcodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CharsetBarcodeID");

                    b.ToTable("CharsetBarcode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CharsetType", b =>
                {
                    b.Property<int>("CharsetTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Charset")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CharsetTypeID");

                    b.ToTable("CharsetType");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CodeDetail", b =>
                {
                    b.Property<int>("CodeDetailID")
                        .HasColumnType("int");

                    b.Property<int?>("BarcodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("CodeDetailID");

                    b.ToTable("CodeDetail");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("AccountUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CustomerBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerLocaltion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<int?>("CustomerPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("CustomerStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("CustomerTypeofBussinessID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerTypeofBussinessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountUserID");

                    b.HasIndex("CustomerTypeofBussinessID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CustomerType", b =>
                {
                    b.Property<int>("CustomerPypeID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerPypeID");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CustomerTypeofBussiness", b =>
                {
                    b.Property<int>("CustomerTypeofBussinessID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerTypeofBussinessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerTypeofBussinessID");

                    b.ToTable("CustomerTypeofBussiness");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Gift", b =>
                {
                    b.Property<int>("GiftsID")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreaterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GiftsName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("GiftsID");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("ProjectAlta.Entity.GiftsOfCampign", b =>
                {
                    b.Property<int>("GiftsOfCampignID")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CodeCount")
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpriredDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftsID")
                        .HasColumnType("int");

                    b.Property<int>("GiftsID1")
                        .HasColumnType("int");

                    b.Property<string>("GiftsOfCampignName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("GiftsOfCampignID");

                    b.HasIndex("GiftsID1");

                    b.ToTable("GiftsOfCampign");
                });

            modelBuilder.Entity("ProjectAlta.Entity.ProgramSize", b =>
                {
                    b.Property<int>("ProgramSizeID")
                        .HasColumnType("int");

                    b.Property<string>("Charset")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CharsetTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CodeLegth")
                        .HasColumnType("int");

                    b.Property<int?>("CountCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TypeCodeID")
                        .HasColumnType("int");

                    b.Property<string>("TypeCodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProgramSizeID");

                    b.HasIndex("CharsetTypeID");

                    b.HasIndex("TypeCodeID");

                    b.ToTable("ProgramSize");
                });

            modelBuilder.Entity("ProjectAlta.Entity.RulesForGift", b =>
                {
                    b.Property<int>("RulesForGiftsID")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("Probability")
                        .HasColumnType("int");

                    b.Property<string>("RulesForGiftsName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("RulesForGiftsID");

                    b.ToTable("RulesForGifts");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Setting", b =>
                {
                    b.Property<int>("SettingID")
                        .HasColumnType("int");

                    b.Property<string>("LandingPage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QRCodeSetting")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SendtoMail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("SettingID");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("ProjectAlta.Entity.TimeFrame", b =>
                {
                    b.Property<int>("TimeFrameID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeFrameID");

                    b.ToTable("TimeFrame");
                });

            modelBuilder.Entity("ProjectAlta.Entity.TypeBarcode", b =>
                {
                    b.Property<int>("TypeBarcodeID")
                        .HasColumnType("int");

                    b.Property<string>("TypeBarcodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TypeBarcodeID");

                    b.ToTable("TypeBarcode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.TypeCode", b =>
                {
                    b.Property<int>("TypeCodeID")
                        .HasColumnType("int");

                    b.Property<string>("TypeCodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TypeCodeID");

                    b.ToTable("TypeCode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Barcode", b =>
                {
                    b.HasOne("ProjectAlta.Entity.CharsetBarcode", "CharsetBarcode")
                        .WithMany("Barcodes")
                        .HasForeignKey("CharsetBarcodeID");

                    b.HasOne("ProjectAlta.Entity.CodeDetail", "CodeDetail")
                        .WithMany("Barcodes")
                        .HasForeignKey("CodeDetailID");

                    b.HasOne("ProjectAlta.Entity.TypeBarcode", "TypeBarcode")
                        .WithMany("Barcodes")
                        .HasForeignKey("TypeBarcodeID");

                    b.Navigation("CharsetBarcode");

                    b.Navigation("CodeDetail");

                    b.Navigation("TypeBarcode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.BarcodesUsageHistory", b =>
                {
                    b.HasOne("ProjectAlta.Entity.Barcode", "Barcode")
                        .WithMany("BarcodesUsageHistories")
                        .HasForeignKey("BarcodeID");

                    b.HasOne("ProjectAlta.Entity.Customer", "Customer")
                        .WithMany("BarcodesUsageHistories")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Barcode");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Customer", b =>
                {
                    b.HasOne("ProjectAlta.Entity.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectAlta.Entity.CustomerTypeofBussiness", "CustomerTypeofBussiness")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeofBussinessID");

                    b.Navigation("Account");

                    b.Navigation("CustomerTypeofBussiness");
                });

            modelBuilder.Entity("ProjectAlta.Entity.GiftsOfCampign", b =>
                {
                    b.HasOne("ProjectAlta.Entity.Gift", "Gift")
                        .WithMany("GiftsOfCampigns")
                        .HasForeignKey("GiftsID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("ProjectAlta.Entity.ProgramSize", b =>
                {
                    b.HasOne("ProjectAlta.Entity.CharsetType", "CharsetType")
                        .WithMany("ProgramSizes")
                        .HasForeignKey("CharsetTypeID");

                    b.HasOne("ProjectAlta.Entity.TypeCode", "TypeCode")
                        .WithMany("ProgramSizes")
                        .HasForeignKey("TypeCodeID");

                    b.Navigation("CharsetType");

                    b.Navigation("TypeCode");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Account", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Barcode", b =>
                {
                    b.Navigation("BarcodesUsageHistories");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CharsetBarcode", b =>
                {
                    b.Navigation("Barcodes");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CharsetType", b =>
                {
                    b.Navigation("ProgramSizes");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CodeDetail", b =>
                {
                    b.Navigation("Barcodes");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Customer", b =>
                {
                    b.Navigation("BarcodesUsageHistories");
                });

            modelBuilder.Entity("ProjectAlta.Entity.CustomerTypeofBussiness", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ProjectAlta.Entity.Gift", b =>
                {
                    b.Navigation("GiftsOfCampigns");
                });

            modelBuilder.Entity("ProjectAlta.Entity.TypeBarcode", b =>
                {
                    b.Navigation("Barcodes");
                });

            modelBuilder.Entity("ProjectAlta.Entity.TypeCode", b =>
                {
                    b.Navigation("ProgramSizes");
                });
#pragma warning restore 612, 618
        }
    }
}
